[{"/home/nfiscus/source/inovelli-leds/src/index.js":"1","/home/nfiscus/source/inovelli-leds/src/serviceWorker.js":"2","/home/nfiscus/source/inovelli-leds/src/AppWrapper.js":"3","/home/nfiscus/source/inovelli-leds/src/App.js":"4","/home/nfiscus/source/inovelli-leds/src/ThemeProvider.js":"5","/home/nfiscus/source/inovelli-leds/src/Strip.js":"6","/home/nfiscus/source/inovelli-leds/src/AppBar.js":"7","/home/nfiscus/source/inovelli-leds/src/Parameter10.js":"8","/home/nfiscus/source/inovelli-leds/src/CustomStripEffects.js":"9","/home/nfiscus/source/inovelli-leds/src/LED.js":"10","/home/nfiscus/source/inovelli-leds/src/Utils.js":"11","/home/nfiscus/source/inovelli-leds/src/CustomEffectEditor.js":"12","/home/nfiscus/source/inovelli-leds/src/ParameterModal.js":"13","/home/nfiscus/source/inovelli-leds/src/ClipboardAccess.js":"14","/home/nfiscus/source/inovelli-leds/src/SaveDialog.js":"15","/home/nfiscus/source/inovelli-leds/src/OpenDialog.js":"16","/home/nfiscus/source/inovelli-leds/src/Options.js":"17","/home/nfiscus/source/inovelli-leds/src/HomeAssistantIcon.js":"18","/home/nfiscus/source/inovelli-leds/src/SaveIcon.js":"19","/home/nfiscus/source/inovelli-leds/src/SaveAsIcon.js":"20","/home/nfiscus/source/inovelli-leds/src/ImportProgram.js":"21","/home/nfiscus/source/inovelli-leds/src/swconfig.js":"22"},{"size":565,"mtime":1608843919396,"results":"23","hashOfConfig":"24"},{"size":5086,"mtime":1601772815790,"results":"25","hashOfConfig":"24"},{"size":482,"mtime":1607209680899,"results":"26","hashOfConfig":"24"},{"size":7498,"mtime":1608843518836,"results":"27","hashOfConfig":"24"},{"size":1539,"mtime":1601775102600,"results":"28","hashOfConfig":"24"},{"size":2337,"mtime":1608443368776,"results":"29","hashOfConfig":"24"},{"size":1011,"mtime":1607554343826,"results":"30","hashOfConfig":"24"},{"size":3342,"mtime":1603063916323,"results":"31","hashOfConfig":"32"},{"size":18610,"mtime":1608840741336,"results":"33","hashOfConfig":"24"},{"size":2516,"mtime":1608434364836,"results":"34","hashOfConfig":"24"},{"size":1598,"mtime":1608842374696,"results":"35","hashOfConfig":"24"},{"size":4325,"mtime":1608680516696,"results":"36","hashOfConfig":"24"},{"size":9236,"mtime":1607557085786,"results":"37","hashOfConfig":"24"},{"size":1095,"mtime":1607395390229,"results":"38","hashOfConfig":"24"},{"size":1013,"mtime":1607404384339,"results":"39","hashOfConfig":"24"},{"size":4402,"mtime":1607478846586,"results":"40","hashOfConfig":"24"},{"size":3882,"mtime":1608843478006,"results":"41","hashOfConfig":"24"},{"size":1181,"mtime":1607558837866,"results":"42","hashOfConfig":"24"},{"size":422,"mtime":1608690381232,"results":"43","hashOfConfig":"24"},{"size":645,"mtime":1608693612576,"results":"44","hashOfConfig":"24"},{"size":1514,"mtime":1608698090006,"results":"45","hashOfConfig":"24"},{"size":268,"mtime":1608843915346,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"ykkaqc",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},"vt0g4d",{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"49"},"/home/nfiscus/source/inovelli-leds/src/index.js",[],["97","98"],"/home/nfiscus/source/inovelli-leds/src/serviceWorker.js",[],"/home/nfiscus/source/inovelli-leds/src/AppWrapper.js",[],"/home/nfiscus/source/inovelli-leds/src/App.js",["99","100","101"],"import React from \"react\";\nimport { CssBaseline, withStyles, Tabs, Tab } from \"@material-ui/core\";\nimport Strip from \"./Strip\";\n\nimport AppBar from \"./AppBar\";\nimport Options from \"./Options\";\nimport CustomStripEffects from \"./CustomStripEffects\";\n\nimport {\n  createConnection,\n  callService,\n  createLongLivedTokenAuth,\n} from \"home-assistant-js-websocket\";\n\nconst styles = (theme) => ({\n  root: {\n    //height: \"98vh\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    \"&>:first-child\": {\n      //flex: \"0 0 auto\",\n      width: \"100%\",\n    },\n    \"&>:last-child\": {\n      flex: \"1 1 100%\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"stretch\",\n      justifyContent: \"center\",\n    },\n  },\n  tabWrapper: {\n    width: \"100%\",\n  },\n  areaWrapper: {\n    display: \"flex\",\n    alignItems: \"stretch\",\n    \"&>:first-child\": {\n      flex: \"1 1 100%\",\n      //alignItems: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      maxWidth: \"800px\",\n    },\n    \"&>:last-child\": {\n      //justifyItem: \"start\",\n      //minWidth: \"400px\",\n      //backgroundColor: theme.palette.background.paper,\n    },\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      customStripEffects: [],\n      finishBehavior: 0,\n      HA_URL: window.localStorage.getItem(\"HA_URL\"),\n      HA_TOKEN: window.localStorage.getItem(\"HA_TOKEN\"),\n      HA_NODE: window.localStorage.getItem(\"HA_NODE\"),\n      HA_SERVICE: window.localStorage.getItem(\"HA_SERVICE\"),\n      valueFormat: window.localStorage.getItem(\"valueFormat\") || 10,\n    };\n\n    if (this.state.HA_URL && this.state.HA_TOKEN) {\n      (async () => {\n        const auth = createLongLivedTokenAuth(\n          this.state.HA_URL,\n          this.state.HA_TOKEN\n        );\n\n        const connection = await createConnection({ auth });\n        this.setState({ homeAssistant: connection }, () => {\n          console.info(\"Home Assistant Connection Saved to State....\");\n        });\n      })();\n    }\n  }\n\n  handleChangeTab = (e, value) => {\n    this.setState({ tab: value });\n  };\n\n  handleParameter10Changes = (field, value) => {\n    this.setState({\n      parameter10: { ...this.state.parameter10, [field]: value },\n    });\n  };\n\n  handleCustomStripEffectChange = (effectArray) => {\n    this.setState({\n      customStripEffects: effectArray,\n    });\n  };\n\n  handleTimeUnitChange = (unit) => {\n    this.setState({ timeUnit: unit });\n  };\n\n  handleFinishBehaviorChange = (behavior) => {\n    this.setState({ finishBehavior: behavior });\n  };\n\n  handleOnPlay = (lightShow) => {\n    this.setState({ lightShow });\n  };\n\n  handleOpenOptions = () => {\n    this.setState({ optionsOpen: true });\n  };\n\n  handleOptionsClosed = () => {\n    this.setState({ optionsOpen: false });\n    if (this.state.homeAssistant) {\n      this.state.homeAssistant.close();\n    }\n    if (this.state.HA_URL && this.state.HA_TOKEN) {\n      (async () => {\n        const auth = createLongLivedTokenAuth(\n          this.state.HA_URL,\n          this.state.HA_TOKEN\n        );\n\n        const connection = await createConnection({ auth });\n        this.setState({ homeAssistant: connection }, () => {\n          console.info(\"Home Assistant Connection Saved to State....\");\n        });\n      })();\n    }\n  };\n\n  handleHomeAssistantURLChange = (value) => {\n    this.setState({ HA_URL: value });\n    window.localStorage.setItem(\"HA_URL\", value);\n  };\n\n  handleHomeAssistantTokenChange = (value) => {\n    this.setState({ HA_TOKEN: value });\n    window.localStorage.setItem(\"HA_TOKEN\", value);\n  };\n\n  handleHomeAssistantNodeChange = (value) => {\n    this.setState({ HA_NODE: value });\n    window.localStorage.setItem(\"HA_NODE\", value);\n  };\n\n  handleHomeAssistantServiceChange = (value) => {\n    this.setState({ HA_SERVICE: value });\n    window.localStorage.setItem(\"HA_SERVICE\", value);\n  };\n\n  handleChangeValueFormat = (value) => {\n    this.setState({ valueFormat: value });\n    window.localStorage.setItem(\"valueFormat\", value);\n  };\n\n  sendProgamThroughHomeAssistant = (program) => {\n    const SERVICE_PARTS = this.state.HA_SERVICE.split(\".\");\n    console.log(SERVICE_PARTS);\n    const HA_SERVICE_DOMAIN = SERVICE_PARTS[0];\n    const HA_SERVICE = SERVICE_PARTS[1];\n    console.log(SERVICE_PARTS[0], SERVICE_PARTS[1]);\n    Promise.all([\n      callService(this.state.homeAssistant, HA_SERVICE_DOMAIN, HA_SERVICE, {\n        node_id: parseInt(this.state.HA_NODE),\n        parameter: 30,\n        value: 0,\n      }),\n      ...program.map(async (parameter) => {\n        return callService(\n          this.state.homeAssistant,\n          HA_SERVICE_DOMAIN,\n          HA_SERVICE,\n          {\n            node_id: parseInt(this.state.HA_NODE),\n            parameter: parseInt(parameter.number),\n            value: parseInt(parameter.value),\n          }\n        );\n      }),\n    ])\n      .then(() => {\n        console.info(\"Successfully sent to Home Assistant\");\n      })\n      .catch((ex) => {\n        console.error(ex);\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <AppBar onOpenOptions={this.handleOpenOptions} />\n        <Options\n          open={this.state.optionsOpen}\n          homeAssistantURL={this.state.HA_URL}\n          homeAssistantToken={this.state.HA_TOKEN}\n          homeAssistantNode={this.state.HA_NODE}\n          homeAssistantService={this.state.HA_SERVICE}\n          format={this.state.valueFormat}\n          setHomeAssistantURL={this.handleHomeAssistantURLChange}\n          setHomeAssistantToken={this.handleHomeAssistantTokenChange}\n          setHomeAssistantNode={this.handleHomeAssistantNodeChange}\n          setHomeAssistantService={this.handleHomeAssistantServiceChange}\n          setFormat={this.handleChangeValueFormat}\n          onClose={this.handleOptionsClosed}\n        />\n        <div className={this.props.classes.root}>\n          <div className={this.props.classes.tabWrapper}>\n            {/* <Tabs value={this.state.tab} onChange={this.handleChangeTab}>\n                  <Tab label=\"Parameter 10\" />\n                  <Tab label=\"Parameter 11\" />\n                  <Tab label=\"Custom Strip Effects\" />\n                  <Tab label=\"Parameter 16\" />\n                </Tabs> */}\n            {/* <div>\n                  {this.state.tab === 0 && (\n                    <Parameter10\n                      color={this.state.parameter10.color}\n                      temperature={this.state.parameter10.temperature}\n                      onChange={this.handleParameter10Changes}\n                    />\n                  )}\n                  {this.state.tab === 2 && (\n                    <CustomStripEffects\n                      effects={this.state.customStripEffects}\n                      onChange={this.handleCustomStripEffectChange}\n                    />\n                  )} \n                </div>*/}\n          </div>\n          <div className={this.props.classes.areaWrapper}>\n            {/* <div>\n              <Strip program={this.state.lightShow} />\n            </div> */}\n            {/*<div>*/}\n            <CustomStripEffects\n              onPlay={this.handleOnPlay}\n              homeAssistantConfigured={this.state.homeAssistant !== undefined}\n              onSendToHomeAssistant={this.sendProgamThroughHomeAssistant}\n              valueFormat={this.state.valueFormat}\n            />\n            {/*</div>*/}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","/home/nfiscus/source/inovelli-leds/src/ThemeProvider.js",[],"/home/nfiscus/source/inovelli-leds/src/Strip.js",[],"/home/nfiscus/source/inovelli-leds/src/AppBar.js",[],"/home/nfiscus/source/inovelli-leds/src/Parameter10.js",["102","103","104","105"],"import React from \"react\";\nimport {\n  withStyles,\n  TextField,\n  Slider,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport Brightness0 from \"@material-ui/icons/Brightness2\";\nimport Brightness7 from \"@material-ui/icons/Brightness7\";\nimport { byteArrayToLong } from \"./Utils\";\n\nlet Gradient = require(\"gradient2\");\nlet gradient = new Gradient({\n  colors: [\n    \"rgb(255,0,0)\",\n    \"rgb(255,125,0)\",\n    \"rgb(255,255,0)\",\n    \"rgb(125,255,0)\",\n    \"rgb(0,255,0)\",\n    \"rgb(0,255,125)\",\n    \"rgb(0,255,255)\",\n    \"rgb(0,125,255)\",\n    \"rgb(0,0,255)\",\n    \"rgb(125,0,255)\",\n    \"rgb(255,0,255)\",\n    \"rgb(255,0,125)\",\n    \"rgb(255,0,0)\",\n  ],\n  steps: 360,\n  model: \"rgb\",\n});\n\nconst LED_COLORS = gradient.toArray(\"hex\");\n\nconst styles = (theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    \"&>*\": {\n      flex: \"1 1 auto\",\n      padding: theme.spacing(2),\n    },\n  },\n  colorHelper: {\n    height: \"10px\",\n    width: \"100%\",\n    background:\n      \"linear-gradient(to right, rgb(255,0,0), rgb(255,125,0), rgb(255,255,0), rgb(125,255,0), rgb(0,255,0), rgb(0,255,125), rgb(0,255,255), rgb(0,125,255), rgb(0,0,255), rgb(125,0,255), rgb(255,0,255), rgb(255,0,125), rgb(255,0,0))\",\n  },\n  temperatureHelper: {\n    height: \"10px\",\n    width: \"100%\",\n    background:\n      \"linear-gradient( right, rgb(166, 209, 255)  0%, white 50%, rgb(255, 160, 0) 100% )\",\n  },\n});\n\nclass Parameter10 extends React.Component {\n  setValue = (field) => (e, value) => {\n    this.props.onChange(field, value);\n  };\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <div>\n          <Typography gutterBottom>Color</Typography>\n          <div className={this.props.classes.colorHelper}></div>\n          <Slider\n            defaultValue={1}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            min={0}\n            max={361}\n            //max={4162}\n            // scale={(x) => {\n            //   if (x < 362) {\n            //     return x;\n            //   } else {\n            //     return 2338 + x;\n            //   }\n            // }}\n            value={this.props.color}\n            onChange={this.setValue(\"color\")}\n          />\n        </div>\n        <div>\n          <Typography gutterBottom>Color Temperature</Typography>\n          <div className={this.props.classes.temperatureHelper}></div>\n          <Slider\n            defaultValue={2700}\n            valueLabelDisplay=\"auto\"\n            step={100}\n            min={2700}\n            max={6500}\n            //max={4162}\n            scale={(x) => {\n              if (x > 2699) {\n                return x;\n              } else {\n                return 0;\n              }\n            }}\n            value={this.props.temperature}\n            onChange={this.setValue(\"temperature\")}\n          />\n        </div>\n        <div>\n          <TextField\n            label={\"Parameter 10 Value\"}\n            value={byteArrayToLong([\n              this.props.color,\n              0,\n              this.props.temperature >= 2700 ? this.props.temperature : 0,\n              0,\n            ])}\n            fullWidth\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Parameter10);\n",["106","107"],"/home/nfiscus/source/inovelli-leds/src/CustomStripEffects.js",["108","109","110","111","112","113"],"import React from \"react\";\nimport {\n  FormControl,\n  IconButton,\n  InputLabel,\n  Menu,\n  MenuItem,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Select,\n  TextField,\n  withStyles,\n  Divider,\n  InputAdornment,\n  Tooltip,\n  SvgIcon,\n  Button,\n  Typography,\n  Grid,\n  Slider,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport Add from \"@material-ui/icons/Add\";\nimport Light from \"@material-ui/icons/EmojiObjects\";\nimport MoreVert from \"@material-ui/icons/MoreVert\";\nimport CustomEffectEditor from \"./CustomEffectEditor\";\nimport Open from \"@material-ui/icons/FolderOpen\";\nimport Import from \"@material-ui/icons/SaveAlt\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport FormatListNumberedIcon from \"@material-ui/icons/FormatListNumbered\";\nimport {\n  byteArrayToLong,\n  longToByteArray,\n  shortToByteArray,\n  UNITS,\n  COLORS,\n  EFFECTS,\n  FINISHES,\n} from \"./Utils\";\nimport ParameterModal from \"./ParameterModal\";\nimport InfiniteIcon from \"@material-ui/icons/AllInclusive\";\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\nimport SaveDialog from \"./SaveDialog\";\nimport OpenDialog from \"./OpenDialog\";\nimport HomeAssistantIcon from \"./HomeAssistantIcon\";\nimport SaveIcon from \"./SaveIcon\";\nimport SaveAsIcon from \"./SaveAsIcon\";\nimport NewIcon from \"@material-ui/icons/AddBox\";\nimport ImportProgram from \"./ImportProgram\";\n\nconst styles = (theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n  },\n});\n\nclass CustomStripEffects extends React.Component {\n  static defaultProps = {\n    timeUnit: 1,\n    finishBehavior: 0,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorOpen: false,\n      effects: [],\n      selectedEffect: undefined,\n      effect: {},\n      anchorEl: null,\n      iterations: 255,\n      timeUnit: 1,\n      finishBehavior: 0,\n      saveDialogOpen: false,\n      openDialogOpen: false,\n      savedAnimation: { animation: {} },\n      indexOfSavedAnimation: null,\n      importProgramDialogOpen: false,\n    };\n  }\n\n  openContextMenu = (selectedEffect) => (e) => {\n    this.setState({ selectedEffect, anchorEl: e.currentTarget });\n  };\n\n  handleCloseContextMenu = () => {\n    this.setState({ selectedEffect: undefined, anchorEl: null });\n  };\n\n  handleEditEffect = (i) => () => {\n    this.setState({\n      editorOpen: true,\n      effect: Object.assign({}, this.state.effects[i]),\n      selectedEffect: i,\n    });\n  };\n\n  handleAddEffect = () => {\n    this.setState({\n      editorOpen: true,\n      selectedEffect: undefined,\n      effect: {\n        color: 0,\n        effect: 0,\n        brightness: 99,\n        duration: 1,\n      },\n    });\n  };\n\n  handleFinishBehaviorChange = (e) => {\n    const { value } = e.target;\n    this.setState({ finishBehavior: value });\n  };\n\n  onCloseEditor = () => {\n    this.setState({ editorOpen: false });\n  };\n\n  onSave = (effect) => {\n    this.setState((lastState) => {\n      let effects = JSON.parse(JSON.stringify(lastState.effects));\n      if (lastState.selectedEffect !== undefined) {\n        effects[lastState.selectedEffect] = effect;\n      } else {\n        effects.push(effect);\n      }\n      return { effects, editorOpen: false, selectedEffect: undefined };\n    });\n  };\n\n  handleTimeUnitChange = (e) => {\n    const { value } = e.target;\n    this.setState({ timeUnit: value });\n  };\n\n  handleDeleteEffect = () => {\n    this.setState((lastState) => {\n      let effects = JSON.parse(JSON.stringify(lastState.effects));\n      effects.splice(this.state.selectedEffect, 1);\n      return {\n        anchorEl: null,\n        effects,\n        selectedEffect: undefined,\n      };\n    });\n  };\n\n  get parameter22() {\n    return byteArrayToLong(\n      Array.from(this.state.effects)\n        .reverse()\n        .map((effect) => effect.effect + effect.color * 8)\n    ).toString(Number(this.props.format || 10));\n  }\n\n  get parameter23() {\n    return byteArrayToLong(\n      Array.from(this.state.effects)\n        .reverse()\n        .map((effect) => effect.brightness)\n    ).toString(Number(this.props.format || 10));\n  }\n\n  get parameter24() {\n    return byteArrayToLong(\n      Array.from(this.state.effects)\n        .reverse()\n        .map((effect) => effect.duration)\n    ).toString(Number(this.props.format || 10));\n  }\n\n  get parameter30() {\n    return byteArrayToLong([\n      this.state.iterations,\n      this.state.finishBehavior,\n      this.state.timeUnit,\n    ]).toString(Number(this.props.format || 10));\n  }\n\n  toggleParameterModal = () => {\n    this.setState((lastState) => ({\n      parameterModalOpen: !lastState.parameterModalOpen,\n    }));\n  };\n\n  setIterations = (e, value) => {\n    this.setState({ iterations: value });\n  };\n\n  handleSaveDialog = () => {\n    this.setState({ saveDialogOpen: true });\n  };\n\n  handleCloseSaveDialog = () => {\n    this.setState({ saveDialogOpen: false });\n  };\n\n  handleSaveAnimation = (name) => {\n    let animations = JSON.parse(window.localStorage.getItem(\"animations\"));\n    if (!animations) {\n      animations = [];\n    }\n\n    const date = new Date();\n\n    animations.push({\n      date: date.getTime(),\n      animation: {\n        iterations: this.state.iterations,\n        finishBehavior: this.state.finishBehavior || 0,\n        timeUnit: this.state.timeUnit,\n        effects: this.state.effects,\n      },\n      name,\n    });\n\n    window.localStorage.setItem(\"animations\", JSON.stringify(animations));\n\n    this.setState({\n      saveDialogOpen: false,\n      savedAnimation: {\n        date: date.getTime(),\n        animation: {\n          iterations: this.state.iterations,\n          finishBehavior: this.state.finishBehavior || 0,\n          timeUnit: this.state.timeUnit,\n          effects: this.state.effects,\n        },\n        name,\n      },\n      indexOfSavedAnimation: animations.length - 1,\n    });\n  };\n\n  handleSaveToCurrentProgram = () => {\n    let animations = JSON.parse(window.localStorage.getItem(\"animations\"));\n    if (!animations) {\n      animations = [];\n    }\n\n    const date = new Date();\n\n    animations[this.state.indexOfSavedAnimation] = {\n      date: date.getTime(),\n      animation: {\n        iterations: this.state.iterations,\n        finishBehavior: this.state.finishBehavior || 0,\n        timeUnit: this.state.timeUnit,\n        effects: this.state.effects,\n      },\n      name: this.state.savedAnimation.name,\n    };\n\n    this.setState({\n      savedAnimation: {\n        date: date.getTime(),\n        animation: {\n          iterations: this.state.iterations,\n          finishBehavior: this.state.finishBehavior || 0,\n          timeUnit: this.state.timeUnit,\n          effects: this.state.effects,\n        },\n        name: this.state.savedAnimation.name,\n      },\n    });\n\n    window.localStorage.setItem(\"animations\", JSON.stringify(animations));\n  };\n\n  handleOpenDialog = () => {\n    this.setState({ openDialogOpen: true });\n  };\n\n  handleCloseOpenDialog = () => {\n    this.setState({ openDialogOpen: false });\n  };\n\n  handleOpenSavedAnimation = (index, entry) => {\n    this.setState({\n      openDialogOpen: false,\n      indexOfSavedAnimation: index,\n      savedAnimation: entry,\n      iterations: entry.animation.iterations,\n      timeUnit: entry.animation.timeUnit,\n      effects: entry.animation.effects,\n      finishBehavior: entry.animation.finishBehavior,\n    });\n  };\n\n  handlePlayAnimationClick = () => {\n    this.props.onPlay(\n      JSON.parse(\n        JSON.stringify({\n          effects: this.state.effects,\n          iterations: this.state.iterations,\n          timeUnit: this.state.timeUnit,\n        })\n      )\n    );\n  };\n\n  sendProgramToHomeAssistant = () => {\n    this.props.onSendToHomeAssistant([\n      { number: 22, value: this.parameter22 },\n      { number: 23, value: this.parameter23 },\n      { number: 24, value: this.parameter24 },\n      { number: 30, value: this.parameter30 },\n    ]);\n  };\n\n  handleStartNew = () => {\n    this.setState({\n      effects: [],\n      selectedEffect: undefined,\n      effect: {},\n      anchorEl: null,\n      iterations: 255,\n      timeUnit: 1,\n      finishBehavior: 0,\n      savedAnimation: { animation: {} },\n      indexOfSavedAnimation: null,\n    });\n  };\n\n  handleOpenImportProgramDialog = () => {\n    this.setState({\n      importProgramDialogOpen: true,\n    });\n  };\n\n  handleCloseImportProgramDialog = () => {\n    this.setState({ importProgramDialogOpen: false });\n  };\n\n  handleImportProgram = (program) => {\n    const PARAMETERS = program.split(\",\");\n    console.log(longToByteArray(PARAMETERS[0]));\n    let COLORS = longToByteArray(PARAMETERS[0]).map(\n      (colorEffect) => shortToByteArray(colorEffect)[1]\n    );\n    let EFFECTS = longToByteArray(PARAMETERS[0]).map(\n      (colorEffect) => shortToByteArray(colorEffect)[0]\n    );\n    let BRIGHTNESS = longToByteArray(PARAMETERS[1]);\n    let DURATIONS = longToByteArray(PARAMETERS[2]);\n    let SETTINGS = longToByteArray(PARAMETERS[3]);\n    //console.log(COLORS, EFFECTS, BRIGHTNESS, DURATIONS);\n    //Drop Empty Effects\n    for (let i = COLORS.length - 1; i >= 0; i--) {\n      if (DURATIONS[i] !== 0) {\n        break;\n      }\n      COLORS.pop();\n      EFFECTS.pop();\n      BRIGHTNESS.pop();\n      DURATIONS.pop();\n    }\n    COLORS.reverse();\n    EFFECTS.reverse();\n    BRIGHTNESS.reverse();\n    DURATIONS.reverse();\n    //console.log(COLORS, EFFECTS, BRIGHTNESS, DURATIONS);\n    const IMPORTED_EFFECTS = COLORS.map((color, index) => ({\n      color: color,\n      effect: EFFECTS[index],\n      brightness: BRIGHTNESS[index],\n      duration: DURATIONS[index],\n    }));\n\n    this.setState({\n      importProgramDialogOpen: false,\n      effects: IMPORTED_EFFECTS,\n      iterations: SETTINGS[0],\n      finishBehavior: SETTINGS[1],\n      timeUnit: SETTINGS[2],\n    });\n  };\n\n  render() {\n    const IS_SAVED_PROGRAM_CHANGED =\n      JSON.stringify(this.state.savedAnimation.animation.effects) !==\n        JSON.stringify(this.state.effects) ||\n      this.state.timeUnit !== this.state.savedAnimation.animation.timeUnit ||\n      this.state.iterations !==\n        this.state.savedAnimation.animation.iterations ||\n      this.state.finishBehavior !==\n        this.state.savedAnimation.animation.finishBehavior;\n    return (\n      <div className={this.props.classes.root}>\n        <List style={{ width: \"100%\" }}>\n          <ListItem>\n            <Tooltip title=\"Clear and Start New\">\n              <IconButton onClick={this.handleStartNew}>\n                <NewIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Open Saved Programs\">\n              <IconButton onClick={this.handleOpenDialog}>\n                <Open />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Save\">\n              <span>\n                <IconButton\n                  onClick={this.handleSaveToCurrentProgram}\n                  disabled={\n                    !IS_SAVED_PROGRAM_CHANGED ||\n                    this.state.effects.length === 0 ||\n                    !this.state.savedAnimation.name\n                  }\n                >\n                  <SaveIcon />\n                </IconButton>\n              </span>\n            </Tooltip>\n            <Tooltip title=\"Save As\">\n              <span>\n                <IconButton\n                  onClick={this.handleSaveDialog}\n                  disabled={this.state.effects.length === 0}\n                >\n                  <SaveAsIcon />\n                </IconButton>\n              </span>\n            </Tooltip>\n            <Tooltip title=\"Import a Program\">\n              <IconButton onClick={this.handleOpenImportProgramDialog}>\n                <Import />\n              </IconButton>\n            </Tooltip>\n          </ListItem>\n          {this.state.savedAnimation.name && (\n            <ListItem>\n              <Typography variant=\"body2\" color=\"primary\">\n                {this.state.savedAnimation.name}{\" \"}\n                {IS_SAVED_PROGRAM_CHANGED && (\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    (Modified)\n                  </Typography>\n                )}\n              </Typography>\n            </ListItem>\n          )}\n          <Divider />\n          <ListItem>\n            <FormControl fullWidth>\n              <InputLabel>Time Unit</InputLabel>\n              <Select\n                value={this.state.timeUnit}\n                onChange={this.handleTimeUnitChange}\n              >\n                {UNITS.map((unit, index) => (\n                  <MenuItem value={index}>{unit}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </ListItem>\n          <Divider />\n          {this.state.effects.map((effect, i) => (\n            <ListItem\n              key={\n                effect.color.toString() +\n                effect.duration.toString() +\n                effect.brightness.toString() +\n                effect.effect.toString() +\n                i\n              }\n              onClick={this.handleEditEffect(i)}\n              button={true}\n            >\n              <ListItemIcon>\n                <Light />\n              </ListItemIcon>\n              <ListItemText\n                primary={`${EFFECTS[effect.effect]} to ${COLORS[effect.color]}`}\n                secondary={`For ${\n                  this.state.timeUnit !== 0\n                    ? effect.duration\n                    : effect.duration * 100\n                } ${\n                  this.state.timeUnit !== 0 ? UNITS[this.state.timeUnit] : \"ms\"\n                } at ${Math.round(\n                  (effect.brightness / 99) * 100\n                )}% brightness.`}\n              />\n              <ListItemSecondaryAction>\n                <IconButton onClick={this.openContextMenu(i)}>\n                  <MoreVert />\n                </IconButton>\n                <Menu\n                  open={\n                    Boolean(this.state.anchorEl) &&\n                    this.state.selectedEffect === i\n                  }\n                  anchorEl={this.state.anchorEl}\n                  onClose={this.handleCloseContextMenu}\n                >\n                  <MenuItem onClick={this.handleDeleteEffect}>Delete</MenuItem>\n                </Menu>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n          {this.state.effects.length < 4 && (\n            <ListItem button onClick={this.handleAddEffect}>\n              <ListItemIcon>\n                <Add />\n              </ListItemIcon>\n              <ListItemText\n                primary=\"Add New Effect\"\n                secondary=\"Add up to 4 steps to your custom effect!\"\n              />\n            </ListItem>\n          )}\n          {this.state.effects.length > 0 && (\n            <React.Fragment>\n              <Divider />\n              <ListItem>\n                <div style={{ width: \"100%\" }}>\n                  <Typography\n                    variant=\"caption\"\n                    color=\"textSecondary\"\n                    component=\"div\"\n                    gutterBottom\n                  >\n                    Iterations\n                  </Typography>\n                  <div>\n                    <Grid container spacing={2}>\n                      <Grid item>\n                        <TimelapseIcon />\n                      </Grid>\n                      <Grid item xs>\n                        <Slider\n                          value={this.state.iterations}\n                          valueLabelDisplay=\"auto\"\n                          min={1}\n                          max={255}\n                          onChange={this.setIterations}\n                        />\n                      </Grid>\n                      <Grid item>\n                        <InfiniteIcon />\n                      </Grid>\n                    </Grid>\n                  </div>\n                </div>\n              </ListItem>\n              <ListItem>\n                <FormControl fullWidth disabled={this.state.iterations === 255}>\n                  <InputLabel>Finish Behavior</InputLabel>\n                  <Select\n                    value={this.state.finishBehavior}\n                    onChange={this.handleFinishBehaviorChange}\n                    disabled={this.state.iterations === 255}\n                  >\n                    <MenuItem value={0}>Off</MenuItem>\n                    <MenuItem value={1}>Previous Color</MenuItem>\n                    <MenuItem value={2}>Last Color In Sequence</MenuItem>\n                  </Select>\n                  {this.state.iterations === 255 && (\n                    <FormHelperText>\n                      No Finish Behavior for Infinite Iterations\n                    </FormHelperText>\n                  )}\n                </FormControl>\n              </ListItem>\n              <Divider />\n              {/* <ListItem button onClick={this.handlePlayAnimationClick}>\n                <ListItemIcon>\n                  <PlayIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Play Animation\" />\n              </ListItem> */}\n              <ListItem button onClick={this.toggleParameterModal}>\n                <ListItemIcon>\n                  <FormatListNumberedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Show Parameter Values\" />\n              </ListItem>\n              <ListItem button onClick={this.sendProgramToHomeAssistant}>\n                <ListItemIcon>\n                  <HomeAssistantIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Send to Home Assistant Device\" />\n              </ListItem>\n            </React.Fragment>\n          )}\n        </List>\n        <CustomEffectEditor\n          open={this.state.editorOpen}\n          onClose={this.onCloseEditor}\n          onSave={this.onSave}\n          effect={this.state.effect}\n        />\n        <ParameterModal\n          parameter22={this.parameter22}\n          parameter23={this.parameter23}\n          parameter24={this.parameter24}\n          parameter30={this.parameter30}\n          open={this.state.parameterModalOpen}\n          onClose={this.toggleParameterModal}\n        />\n        <SaveDialog\n          open={this.state.saveDialogOpen}\n          onClose={this.handleCloseSaveDialog}\n          onSave={this.handleSaveAnimation}\n        />\n        <OpenDialog\n          open={this.state.openDialogOpen}\n          onClose={this.handleCloseOpenDialog}\n          onOpen={this.handleOpenSavedAnimation}\n        />\n        <ImportProgram\n          open={this.state.importProgramDialogOpen}\n          onClose={this.handleCloseImportProgramDialog}\n          onImport={this.handleImportProgram}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(CustomStripEffects);\n","/home/nfiscus/source/inovelli-leds/src/LED.js",[],"/home/nfiscus/source/inovelli-leds/src/Utils.js",[],"/home/nfiscus/source/inovelli-leds/src/CustomEffectEditor.js",[],"/home/nfiscus/source/inovelli-leds/src/ParameterModal.js",[],"/home/nfiscus/source/inovelli-leds/src/ClipboardAccess.js",[],"/home/nfiscus/source/inovelli-leds/src/SaveDialog.js",[],"/home/nfiscus/source/inovelli-leds/src/OpenDialog.js",[],"/home/nfiscus/source/inovelli-leds/src/Options.js",[],"/home/nfiscus/source/inovelli-leds/src/HomeAssistantIcon.js",[],"/home/nfiscus/source/inovelli-leds/src/SaveIcon.js",[],"/home/nfiscus/source/inovelli-leds/src/SaveAsIcon.js",[],"/home/nfiscus/source/inovelli-leds/src/ImportProgram.js",[],"/home/nfiscus/source/inovelli-leds/src/swconfig.js",["114"],"export default {\r\n  onUpdate: registration => {\r\n    registration.unregister().then(() => {\r\n      window.location.reload();\r\n    });\r\n  },\r\n  onSuccess: registration => {\r\n    console.info(\"service worker on success state\");\r\n    console.log(registration);\r\n  }\r\n};\r\n",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":35,"nodeType":"121","messageId":"122","endLine":2,"endColumn":39},{"ruleId":"119","severity":1,"message":"123","line":2,"column":41,"nodeType":"121","messageId":"122","endLine":2,"endColumn":44},{"ruleId":"119","severity":1,"message":"124","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":13},{"ruleId":"119","severity":1,"message":"125","line":6,"column":3,"nodeType":"121","messageId":"122","endLine":6,"endColumn":7},{"ruleId":"119","severity":1,"message":"126","line":9,"column":8,"nodeType":"121","messageId":"122","endLine":9,"endColumn":19},{"ruleId":"119","severity":1,"message":"127","line":10,"column":8,"nodeType":"121","messageId":"122","endLine":10,"endColumn":19},{"ruleId":"119","severity":1,"message":"128","line":34,"column":7,"nodeType":"121","messageId":"122","endLine":34,"endColumn":17},{"ruleId":"115","replacedBy":"129"},{"ruleId":"117","replacedBy":"130"},{"ruleId":"119","severity":1,"message":"131","line":14,"column":3,"nodeType":"121","messageId":"122","endLine":14,"endColumn":12},{"ruleId":"119","severity":1,"message":"132","line":17,"column":3,"nodeType":"121","messageId":"122","endLine":17,"endColumn":17},{"ruleId":"119","severity":1,"message":"133","line":19,"column":3,"nodeType":"121","messageId":"122","endLine":19,"endColumn":10},{"ruleId":"119","severity":1,"message":"134","line":20,"column":3,"nodeType":"121","messageId":"122","endLine":20,"endColumn":9},{"ruleId":"119","severity":1,"message":"135","line":32,"column":8,"nodeType":"121","messageId":"122","endLine":32,"endColumn":16},{"ruleId":"119","severity":1,"message":"136","line":41,"column":3,"nodeType":"121","messageId":"122","endLine":41,"endColumn":11},{"ruleId":"137","severity":1,"message":"138","line":1,"column":1,"nodeType":"139","endLine":11,"endColumn":3},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'Tabs' is defined but never used.","Identifier","unusedVar","'Tab' is defined but never used.","'Strip' is defined but never used.","'Grid' is defined but never used.","'Brightness0' is defined but never used.","'Brightness7' is defined but never used.","'LED_COLORS' is assigned a value but never used.",["140"],["141"],"'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'SvgIcon' is defined but never used.","'Button' is defined but never used.","'PlayIcon' is defined but never used.","'FINISHES' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]